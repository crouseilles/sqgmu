function mean_epsilon = fct_plot_dissipation(model,fft_b,sigma,day)
% This function creates plot online for the dissipation terms and save it
%

%% Get paramters

% Grid
x = model.grid.x;
y = model.grid.y;
My = model.grid.MX(2);

% Other parameters
taille_police = 12;
id_part=1;
type_data = model.type_data;
folder_simu = model.folder.folder_simu;
plot_moments = model.advection.plot_moments;
map = model.folder.colormap;

%% Dissipation terms
% Compute the different terms
fft_b = fft_b(:,:,:,id_part);
model.advection.N_ech = 1;
if model.sigma.sto & ...
        strcmp(model.sigma.type_spectrum,'SelfSim_from_LS')
    model.sigma.a0 = model.sigma.a0(id_part);
    model.sigma.a0_on_dt =model.sigma.a0_on_dt(id_part);
    if model.sigma.Smag.bool
        model.sigma.a0_SS=model.sigma.a0_SS(id_part);
        model.sigma.a0_LS = model.sigma.a0_LS(id_part);
    end
    model.advection.coef_diff = ...
        model.advection.coef_diff(id_part);
end
[turb_dissip,noise_intake,estim_noise_intake, estim_aa_noise_intake, ...
    dissip_HV,intake_forcing] = ...
    fct_dissip(model,fft_b,sigma);
dissip_sto = turb_dissip - noise_intake;
epsilon = dissip_sto + dissip_HV;
epsilon_estim = turb_dissip - estim_noise_intake + dissip_HV;
epsilon_estim_aa = turb_dissip - estim_aa_noise_intake + dissip_HV;

% Printing ?
mean_epsilon = mean(epsilon(:));
mean_epsilon_estim = mean(epsilon_estim(:));
mean_intake = mean(intake_forcing(:));
mean_energy_variation = mean_intake - mean_epsilon;
mean_energy_variation_estim = mean_intake - mean_epsilon_estim;

mean_energy_variation_onOdgb2_byDay = mean_energy_variation ...
    * 3600*24/model.odg_b^2;
mean_energy_variation_estim_onOdgb2_byDay = mean_energy_variation_estim ...
    * 3600*24/model.odg_b^2;



% Plots

% Turbulent dissipation = grad(b)' a/2 grad(b)
X0=[6 4.2];
width = 3.65;
%width = 3.65;
height = 4;
%height = 3;
close(figure(5));
figure5=figure(5);
set(figure5,'Units','inches', ...
    'Position',[X0(1) X0(2) 2*width 3*height], ...
    'PaperPositionMode','auto');
subplot(3,2,1)
% subimage(x,y,turb_dissip');axis xy;
imagesc(x,y,turb_dissip');axis xy;
axis equal
%     caxis([-1 1]*model.odg_b);
if model.folder.colormap_freeze
    colormap('default');
    colorbar;
else
    ax2 = gca;
    colorbar('peer',ax2);
    colormap(ax2,'default');
end
set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
ylabel('y(m)',...
    'FontUnits','points',...
    'interpreter','latex',...
    'FontSize',taille_police,...
    'FontName','Times')
xlabel('x(m)',...
    'interpreter','latex',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
title('$\frac 12 \nabla b ^T a \nabla b $',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'interpreter','latex',...
    'FontSize',12,...
    'FontName','Times')

% Noise intake
subplot(3,2,2)
% subimage(x,y,noise_intake');
imagesc(x,y,noise_intake');axis xy;
axis equal
%     caxis([0 model.odg_b/(1e-3)*1.5e-4]);
%     if strcmp(type_data,'Spectrum')
%         caxis([0 model.odg_b/(1e-3)*1e-3]);
%     end
if model.folder.colormap_freeze
    colormap('default');
    colorbar;
else
    ax2 = gca;
    colorbar('peer',ax2);
    colormap(ax2,'default');
end
set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
ylabel('y(m)',...
    'FontUnits','points',...
    'interpreter','latex',...
    'FontSize',taille_police,...
    'FontName','Times')
xlabel('x(m)',...
    'interpreter','latex',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
title('$ \frac 1 2 \Pi [ \sigma \cdot \nabla b ]$',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'interpreter','latex',...
    'FontSize',12,...
    'FontName','Times')


% Dissipation due to the stochastic subgrid parametrization
subplot(3,2,3)
% subimage(x,y,dissip_sto');
imagesc(x,y,dissip_sto');axis xy;
axis equal
%     caxis([0 model.odg_b/(1e-3)*1.5e-4]);
%     if strcmp(type_data,'Spectrum')
%         caxis([0 model.odg_b/(1e-3)*1e-3]);
%     end
if model.folder.colormap_freeze
    colormap('default');
    colorbar;
else
    ax2 = gca;
    colorbar('peer',ax2);
    colormap(ax2,'default');
end
set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
ylabel('y(m)',...
    'FontUnits','points',...
    'interpreter','latex',...
    'FontSize',taille_police,...
    'FontName','Times')
xlabel('x(m)',...
    'interpreter','latex',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
title('\hspace{1cm} Net sto. dissip.',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'interpreter','latex',...
    'FontSize',12,...
    'FontName','Times')


% Dissipation due to the hyperviscosity
subplot(3,2,4)
% subimage(x,y,dissip_HV');
if model.advection.Lap_visco.bool
    imagesc(x,y,dissip_HV');axis xy;
else
    imagesc(x,y,epsilon_estim');axis xy;
end
axis equal
%     caxis([0 model.odg_b/(1e-3)*1.5e-4]);
%     if strcmp(type_data,'Spectrum')
%         caxis([0 model.odg_b/(1e-3)*1e-3]);
%     end
if model.folder.colormap_freeze
    colormap('default');
    colorbar;
else
    ax2 = gca;
    colorbar('peer',ax2);
    colormap(ax2,'default');
end
set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
ylabel('y(m)',...
    'FontUnits','points',...
    'interpreter','latex',...
    'FontSize',taille_police,...
    'FontName','Times')
xlabel('x(m)',...
    'interpreter','latex',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
if model.advection.HV.bool
    title(['$ \nu_{HV} ( \Delta^' ...
        num2str(model.advection.HV.order/4) ' b )^2$'],...
        'FontUnits','points',...
        'FontWeight','normal',...
        'interpreter','latex',...
        'FontSize',12,...
        'FontName','Times')
elseif model.advection.Lap_visco.bool
    title('$ \nu \| \nabla b \|^2$',...
        'FontUnits','points',...
        'FontWeight','normal',...
        'interpreter','latex',...
        'FontSize',12,...
        'FontName','Times')
else
    title('$ \epsilon_e$',...
        'FontUnits','points',...
        'FontWeight','normal',...
        'interpreter','latex',...
        'FontSize',12,...
        'FontName','Times')
end


% Total dissipation
subplot(3,2,5)
% subimage(x,y,epsilon');
imagesc(x,y,epsilon');axis xy;
axis equal
%     caxis([0 model.odg_b/(1e-3)*1.5e-4]);
%     if strcmp(type_data,'Spectrum')
%         caxis([0 model.odg_b/(1e-3)*1e-3]);
%     end
if model.folder.colormap_freeze
    colormap('default');
    colorbar;
else
    ax2 = gca;
    colorbar('peer',ax2);
    colormap(ax2,'default');
end
set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
ylabel('y(m)',...
    'FontUnits','points',...
    'interpreter','latex',...
    'FontSize',taille_police,...
    'FontName','Times')
xlabel('x(m)',...
    'interpreter','latex',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
title('$ \epsilon$',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'interpreter','latex',...
    'FontSize',12,...
    'FontName','Times')

% Intake forcing
subplot(3,2,6)
% subimage(x,y,intake_forcing');
if isfield(model.advection, 'forcing') && model.advection.forcing.bool
    imagesc(x,y,intake_forcing');axis xy;
else
    imagesc(x,y,epsilon_estim_aa');axis xy;    
end
axis equal
%     caxis([0 model.odg_b/(1e-3)*1.5e-4]);
%     if strcmp(type_data,'Spectrum')
%         caxis([0 model.odg_b/(1e-3)*1e-3]);
%     end
if model.folder.colormap_freeze
    colormap('default');
    colorbar;
else
    ax2 = gca;
    colorbar('peer',ax2);
    colormap(ax2,'default');
end
set(gca,...
    'Units','normalized',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
ylabel('y(m)',...
    'FontUnits','points',...
    'interpreter','latex',...
    'FontSize',taille_police,...
    'FontName','Times')
xlabel('x(m)',...
    'interpreter','latex',...
    'FontUnits','points',...
    'FontWeight','normal',...
    'FontSize',taille_police,...
    'FontName','Times')
if isfield(model.advection, 'forcing') && model.advection.forcing.bool
    title('Forc.intake',...
        'FontUnits','points',...
        'FontWeight','normal',...
        'interpreter','latex',...
        'FontSize',12,...
        'FontName','Times')
else
    title('$ \epsilon_e^{aa}$',...
        'FontUnits','points',...
        'FontWeight','normal',...
        'interpreter','latex',...
        'FontSize',12,...
        'FontName','Times')    
end

drawnow;
eval( ['print -depsc ' folder_simu '/Dissipation/' day '.eps']);

